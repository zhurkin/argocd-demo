apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: alloy
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'https://grafana.github.io/helm-charts'
    targetRevision: "0.6.1"
    helm:
      # parameters:
      #    - name: nameOverride
      #      value: "vm"
      #    - name: defaultDashboardsEnabled
      #      value: "false"
      #    - name: experimentalDashboardsEnabled
      #      value: "false"
      #    - name: alertmanager.enabled
      #      value: "false"
      #    - name: vmalert.enabled
      #      value: "false"
      #    - name: grafana.enabled
      #      value: "false"
         ## Закоментировал, т.к. не получается все параметры так передать. Сделал для этого отдельно раздел в Values-блоке ##
         # - name: kubeEtcd.service.port        # <--- Эта строка в Арго нормально отработала
         #   value: "2381"                      # <--- Эта строка в Арго нормально отработала
         # - name: kubeEtcd.service.targetPort  # <--- Эта строка в Арго нормально отработала
         #   value: "2381"                      # <--- Эта строка в Арго нормально отработала
         # - name: kubeEtcd.vmScrape.spec.endpoints.scheme # <--- Эта строка в Арго не отрабатывает
         #   value: "http"                                 # <--- Эта строка в Арго не отрабатывает
      values: |
        alloy:
          configMap:
            content: |-
        
              loki.write "default" {
                endpoint {
                  url = "http://loki-gateway.loki-stack.svc.cluster.local/loki/api/v1/push"
                }
              }
        
              discovery.kubernetes "pod" {
                  role = "pod"
              }
        
              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets
        
                // Label creation - "namespace" field from "__meta_kubernetes_namespace"
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }
        
                // Label creation - "pod" field from "__meta_kubernetes_pod_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }
        
                // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "container"
                }
        
                // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }
        
                // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                  separator = "/"
                  replacement = "$1"
                }
        
                // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "__path__"
                  separator = "/"
                  replacement = "/var/log/pods/*$1/*.log"
                }
        
                // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  action = "replace"
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
              }
        
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }
        
              loki.process "pod_logs" {
                stage.static_labels {
                    values = {
                      cluster = "myCluster",
                    }
                }
                forward_to = [loki.write.default.receiver]
              }
        
        
        
        
        
              loki.source.kubernetes_events "cluster_events" {
                job_name   = "integrations/kubernetes/eventhandler"
                log_format = "logfmt"
                forward_to = [
                  loki.process.cluster_events.receiver,
                ]
              }
        
              // loki.process receives log entries from other loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component’s arguments.
              loki.process "cluster_events" {
                forward_to = [loki.write.default.receiver]
        
                stage.static_labels {
                  values = {
                    cluster = "CLUSTER_NAME",
                  }
                }
        
                stage.labels {
                  values = {
                    kubernetes_cluster_events = "job",
                  }
                }
              }
        
         
    chart: alloy
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: alloy
  syncPolicy:
    syncOptions:
      - CreateNamespace=true